>> SETTING UP THE SYSTEM AS SERVER:
                      > Install Linux First

                      AUTOMATIC RESTART DUE TO POWER FAILURE:
                        [WINDOWS+LINUX]
                        > Enter your BIOS/UEFI settings when booting (usually by pressing F12, F2, Del, or Esc during startup) (Advanced->Power Options)
                        > Wake Up by Integrated LAN: Disabled
                          AC Recovery: Power On/Last State
                          Deep Sleep Control: Disabled
                          USB Wake Support: Enabled
                          USB Power Share in Sleep State: Normal
                          Auto Power On: Enabled
                          Auto Power On Mode: Everyday
                          Auto Power On Date: 15
                          Auto Power On ATIme: 12:30:30
                          Numlock Key: Disabled

                      BOOT OPTIONS:
                        [WINDOWS]
                        [LINUX]
                          - At Installation: GPT(UFEI)>>Offline(if no internet)+NTFS(>4GB)?

                      AUTOMATIC LOG IN TO THE USER:
                          [LINUX]
                          sudo mkdir -p /etc/gdm3
                          sudo nano /etc/gdm3/custom.conf
                          Modify:
                            [daemon]
                            AutomaticLoginEnable=true
                            AutomaticLogin=arni-linux
                          sudo systemctl restart gdm3
                          cat /etc/gdm3/custom.conf

                      NEVER SLEEP:
                        [WINDOWS]
                        > System, Power
                            - Power: Best Performance
                            - Turn off my screen after: 1 minute
                            - Sleep never
                            - Hibernate never
                            - Enrgey saver off
                        [LINUX]
                          [See this page (public) on the browser to copy commands]
                        > sudo nano /etc/systemd/logind.conf
                        > Uncomment and modify:
                            HandleLidSwitch=ignore
                            HandleLidSwitchExternalPower=ignore
                            HandleSuspendKey=ignore
                            HandleHibernateKey=ignore
                        > sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
                          # Disable GNOME power management sleep
                          gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'
                          gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing'
                          gsettings set org.gnome.desktop.session idle-delay 0
                          # Disable system-level power management
                          sudo systemctl mask systemd-suspend.service
                          sudo systemctl mask systemd-hibernate.service
                          sudo systemctl mask systemd-hybrid-sleep.service
                          # Restart the login manager to apply changes
                          sudo systemctl restart systemd-logind

                      ANYDESK ACCESS:
                        [WINDOWS+LINUX]
                        > Install ANYDESK (debian)
                            sudo apt update
                            cd Downloads
                            sudo dpkg -i anydesk_VERSION_amd64.deb
                            sudo apt-get install -f
                            anydesk
                        > Settings:
                            - Access: Interactive Access: Always show incoming session requests
                            - Permission Profiles: Full Access, Set Passwords, Select all things possible
                            - Display: Optimize Screen Usage - Stretch
                        > Start ANYDESK at Power Up:
                            [WINDOWS]
                            - Open the Task Scheduler by pressing Win + R, typing taskschd.msc, and pressing Enter.
                            - In Task Scheduler, click Create Task in the right-hand pane.
                            - Under the General tab, name the task (e.g., "Start AnyDesk").
                            - Go to the Triggers tab, click New, and select At startup.
                            - In the Actions tab, click New, and browse for the AnyDesk executable (usually found in C:\Program Files (x86)\AnyDesk\AnyDesk.exe).
                            - Click OK to save the task
                            [LINUX]
                            cd /etc/systemd/system$
                            sudo nano anydesk.service
                                [Unit]
                                Description=AnyDesk
                                Requires=network.target
                                After=systemd-user-sessions.service

                                [Service]
                                Type=simple
                                ExecStart=/usr/bin/anydesk --service
                                PIDFile=/var/run/anydesk.pid
                                KillMode=mixed
                                TimeoutStopSec=30
                                User=root
                                LimitNOFILE=100000

                                [Install]
                                WantedBy=multi-user.target

                      REMOTE ACCESS VIA VS CODE TUNNEL:
                        From Server:
                          [WINDOWS+LINUX]
                          > Install code from the Ubuntu app store
                          > Install "Remote Development" extension
                          > Press F1 → type "Remote Tunnels: Start"
                          > Sign in with GitHub account and Name your machine
                          [WINDOWS]
                          > Run ./startup-wsl.ps1 (user level) and ./wsl-monitor.ps1 (root level, no log in) from terminal
                          > Set sleep and hibernate to Never | Pause windows updates in emergency situations
                          [LINUX]
                          > Search Startup Applications
                          > Name: Visual Studio Code, Command: code .
                        From Client:
                          [WINDOWS+LINUX]
                          > Install "Remote Development"
                          > Press F1 → "Remote Tunnels: Connect"
                          > Sign in with same GitHub account and Select your desktop from list

>> KEEP NOTEBOOK RUNNING ON SERVER AND GO OUT CLOSING THE CLIENT:
                      From Client:
                        > sudo apt-get update
                        > sudo apt-get install tmux
                        > [from wsl terminal] tmux new -s notebook_session
                        > cd your/project/path
                        > (activate virtual environment) source venv/bin/activate
                        > jupyter nbconvert --to notebook --execute --inplace exp-04/exp_04.01.ipynb
                          jupyter nbconvert --to notebook --execute exp-04/exp_04.01.ipynb --output exp-04/exp_04.01_output.ipynb
                        > Detach session: Press Ctrl+B, then D
                        > Close VS Code & shutdown local computer - Go out and chill

                        > Connect to remote desktop via VS Code
                        > tmux ls
                        > [from wsl terminal] tmux attach -t notebook_session
                        > Check your output ndef otebook: exp_04.01_output.ipynb
                        > (Kill session when done) tmux kill-session -t notebook_session / exit
                        > (Kill all tmux sessions) tmux kill-server

>> RANDOM COMMANDS:
                      > .ipynb to .py
                        jupyter nbconvert --to script exp-04/exp_04.01.ipynb
                      > git log in
                        git config --global user.email "x@y.c"
                        git config --global user.name "UserName"
                      > MAKE REQUIREMENTS
                        pip freeze > requirements.txt
                        (on a new env) pip install -r requirements.txt

>> RANFO:
                      > CUDA COMPATIBILITY WITH TENSORFLOW
                        https://www.tensorflow.org/install/source#gpu

>> PYTORCH IN A FRESH VIRUTUAL ENVIRONMENT:
                      [WINDOWS: CURRENTLY NOT WORKING AS VERSIONS ARE NOT COMPATIBLE]
                      > python -m venv torchenv --clear --without-pip
                      > source torchenv/bin/activate
                      > pip uninstall -y -r <(pip freeze)
                      > curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                      > python get-pip.py
                      > rm get-pip.py
                      > pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu120
                      > pip install --no-cache-dir numpy pandas matplotlib opencv-python scikit-learn xgboost scikit-image tabulate tqdm bm3d
                      > which python
                      > pip list
                      [LINUX]
                      > sudo apt update
                      > sudo apt install python3-venv
                      > cd pytorch_project
                      > python3 -m venv pytorch_env
                      > source pytorch_env/bin/activate
                      > pip install --upgrade pip
                      > pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 # 12.2 in nvidia-smi
                      > which python
                      python:
                        import torch
                        print(f"PyTorch version: {torch.__version__}")
                        print(f"CUDA available: {torch.cuda.is_available()}")
                        print("CUDA version: ", torch.version.cuda)
                        print("cuDNN version: ", torch.backends.cudnn.version())
                        print(f"CUDA device count: {torch.cuda.device_count()}")
                        if torch.cuda.is_available():
                            print(f"CUDA device name: {torch.cuda.get_device_name(0)}")

/* [DOES NOT WORK?] AUTOMATIC START OF VS CODE AT POWER UP */
> sudo nano /etc/systemd/system/vscode-server.service
>   [Unit]
    Description=VS Code Server Auto Starter at Power Up
    After=network.target snapd.service

    [Service]
    Type=simple
    User=arni-linux
    ExecStart=/bin/bash -c 'while true; do if ! pgrep code-server; then snap run code --server; fi; sleep 60; done'
    Restart=always
    RestartSec=10
    # Remove the empty environment variables since they're not needed
    WorkingDirectory=/home/arni-linux

    [Install]
    WantedBy=multi-user.target
    > sudo chmod 644 /etc/systemd/system/vscode-server.service
    > sudo systemctl enable vscode-server.service
    > sudo systemctl start vscode-server.service
    > sudo systemctl restart vscode-server.service


/* TENSORFLOWxNVIDIARTX INSTALLATION: TO BE VERIFIED  */
// not sure how it worked out but (from trying backtracking) might be like this

// sudo apt install -y nvidia-cuda-toolkit

# Add the NVIDIA package signing key
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub

# Add the CUDA repository
sudo sh -c 'echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" > /etc/apt/sources.list.d/cuda.list'

# Update the package list
sudo apt update

sudo apt install -y cuda

nvcc --version

echo 'export PATH=/usr/local/cuda/bin:$PATH' >> ~/.bashrc
source ~/.bashrc

ls /usr/local/cuda/lib64/libcudart.so*

Then (below commands): https://developer.nvidia.com/cudnn-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=deb_local

Installation Instructions:
wget https://developer.download.nvidia.com/compute/cudnn/9.5.1/local_installers/cudnn-local-repo-ubuntu2004-9.5.1_1.0-1_amd64.deb
sudo dpkg -i cudnn-local-repo-ubuntu2004-9.5.1_1.0-1_amd64.deb
sudo cp /var/cudnn-local-repo-ubuntu2004-9.5.1/cudnn-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get -y install cudnn
To install for CUDA 12, perform the above configuration but install the CUDA 12 specific package:
sudo apt-get -y install cudnn-cuda-12
//
To install for CUDA 11, perform the above configuration but install the CUDA 11 specific package:
sudo apt-get -y install cudnn-cuda-11


export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
wsl --shutdown
